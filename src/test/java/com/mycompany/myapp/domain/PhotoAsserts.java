package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PhotoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoAllPropertiesEquals(Photo expected, Photo actual) {
        assertPhotoAutoGeneratedPropertiesEquals(expected, actual);
        assertPhotoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoAllUpdatablePropertiesEquals(Photo expected, Photo actual) {
        assertPhotoUpdatableFieldsEquals(expected, actual);
        assertPhotoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoAutoGeneratedPropertiesEquals(Photo expected, Photo actual) {
        assertThat(actual)
            .as("Verify Photo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoUpdatableFieldsEquals(Photo expected, Photo actual) {
        assertThat(actual)
            .as("Verify Photo relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getImageContentType()).as("check image contenty type").isEqualTo(expected.getImageContentType()))
            .satisfies(a -> assertThat(a.getUploadDate()).as("check uploadDate").isEqualTo(expected.getUploadDate()))
            .satisfies(a -> assertThat(a.getCaptureDate()).as("check captureDate").isEqualTo(expected.getCaptureDate()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getKeywords()).as("check keywords").isEqualTo(expected.getKeywords()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhotoUpdatableRelationshipsEquals(Photo expected, Photo actual) {
        assertThat(actual)
            .as("Verify Photo relationships")
            .satisfies(a -> assertThat(a.getAlbum()).as("check album").isEqualTo(expected.getAlbum()))
            .satisfies(a -> assertThat(a.getTags()).as("check tags").isEqualTo(expected.getTags()));
    }
}
